<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DeepArena – DeepArena</title><link>https://deeparena.github.io/website/</link><description>Recent content on DeepArena</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 06 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://deeparena.github.io/website/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Docsy的简单文档</title><link>https://deeparena.github.io/website/blog/news/first-post/</link><pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate><guid>https://deeparena.github.io/website/blog/news/first-post/</guid><description>
&lt;img src="https://deeparena.github.io/website/blog/news/first-post/featured-sunset-get_hu69849a7cdb847c2393a7b3a7f6061c86_387442_640x0_resize_box_3.png" width="640" height="253"/>
&lt;p>&lt;strong>这是一篇典型的包含图片的博客文章。&lt;/strong>&lt;/p>
&lt;p>前端内容指定博客文章的日期、标题、将显示在博客登录页面上的简短描述以及作者&lt;/p>
&lt;h2 id="包括图像">包括图像&lt;/h2>
&lt;p>这是一张图片（&lt;code>featured-sunset1-get.png&lt;/code>），其中包括一条署名和一个标题。&lt;/p>
&lt;figure class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://deeparena.github.io/website/website/blog/news/first-post/featured-sunset-get_hu69849a7cdb847c2393a7b3a7f6061c86_387442_600x300_fill_box_smart1_3.png" width="600" height="300">
&lt;figcaption class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
获取并缩放即将发布的Hugo 0.43中的图像。
&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>要想明白 Go 语言中的指针，需要知道以下概念&lt;/p>
&lt;h3 id="变量">变量&lt;/h3>
&lt;p>对于变量，可以认为就是给内存中一块区域指定一个名称。我们可以通过这个名称直接访问这块内存。既然是变量，意思也就是说这块儿内存里的内容，也就是变量值，是可以改变的。我们可以通过使用这个变量名，通过某些方式对这块儿内存中的值进行修改。这也是区分于变量和常量的关键点。
&lt;img src="https://cdn.nlark.com/yuque/0/2023/png/27548527/1691115571463-f5cfb6ed-d25c-4c61-9d6c-ab1793b23848.png#averageHue=%23fdfcfc&amp;amp;clientId=ue58ec17d-c322-4&amp;amp;from=paste&amp;amp;height=515&amp;amp;id=u68c143ea&amp;amp;originHeight=337&amp;amp;originWidth=531&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=67482&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u7fff5003-099d-41f1-b638-320c57bc3ec&amp;amp;title=&amp;amp;width=812" alt="image.png">
通过上图，我们基本上可以了解，Go语言中的变量基本上有三个元素构成：&lt;/p>
&lt;ul>
&lt;li>变量名（var1、var2）&lt;/li>
&lt;li>内存（每快内存都有一个&lt;strong>内存地址&lt;/strong>）&lt;/li>
&lt;li>变量的数据类型，标明了这块内存只能存放哪种类型的数据&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>变量名也应该是需要在内存中存储的，不过对于变量名怎么映射到内存，并且变量名又是如何进行访问的，这些都有底层来自动实现。不同的编程语言都有自己的内存模型，这里我们只关心用户层面变量的访问&lt;/p>
&lt;/blockquote>
&lt;h3 id="指针">指针&lt;/h3>
&lt;p>我们知道变量是用来存储数据的，变量的本质是给存储数据的内存地址起了一个好记的别名。比如我们定义了一个变量&lt;code>a := 10&lt;/code>，这个时候可以直接通过a这个变量来读取内存中保存的10这个值。在计算机底层a这个变量其实对应了一个内存地址。
指针也是一个变量，但它是一种特殊的变量，它存储的数据不是一个普通的值，而是另一个变量的内存地址。
&lt;img src="https://cdn.nlark.com/yuque/0/2023/png/27548527/1691116027864-2392cebd-4920-428c-96b6-b60b9cad75e1.png#averageHue=%23f4f2ea&amp;amp;clientId=ue58ec17d-c322-4&amp;amp;from=paste&amp;amp;height=462&amp;amp;id=u1d07e113&amp;amp;originHeight=444&amp;amp;originWidth=750&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=158656&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u3985f9d1-d7a2-42c8-9e7d-c28e450079c&amp;amp;title=&amp;amp;width=780" alt="image.png">&lt;/p>
&lt;h3 id="指针地址和指针类型">指针地址和指针类型&lt;/h3>
&lt;p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。
Go 语言中使用 &lt;code>&amp;amp;&lt;/code> 字符放在变量前面对变量进行取地址操作。
Go语言中的值类型 &lt;code>int、float、bool、string、array、struct&lt;/code>都有对应的指针类型，如：
&lt;code>*int、*int64、*string&lt;/code> 等
取变量指针的语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ptr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">v&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>v&lt;/code>：代表被取地址的变量，类型为T&lt;/li>
&lt;li>&lt;code>ptr&lt;/code>：用于接收地址的变量，ptr的类型就为T，被称做T的指针类型。代表指针&lt;/li>
&lt;/ul>
&lt;p>举个例子：&lt;/p>
&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2023/png/27548527/1691116408360-01c35c46-436b-4d26-8135-31bb4620b63b.png#averageHue=%23f5f3f3&amp;amp;clientId=ue58ec17d-c322-4&amp;amp;from=paste&amp;amp;height=521&amp;amp;id=u6d872bcd&amp;amp;originHeight=487&amp;amp;originWidth=750&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=90628&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=uda9263b9-e796-42bc-a6a8-b112591aaa6&amp;amp;title=&amp;amp;width=802" alt="image.png">&lt;/p>
&lt;h3 id="指针取值">指针取值&lt;/h3>
&lt;p>在对普通变量进行&lt;code>&amp;amp;&lt;/code>操作符取地址后，会获得这个变量指针，然后可以对指针使用&lt;code>*&lt;/code>操作，也就是指针取值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 修改 b 的值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 输出结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 10 0x14000046760 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 20 0x14000046760 20
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="new-和-make-函数">new 和 make 函数&lt;/h3>
&lt;p>需要注意的是，指针必须在创建内存后才可以使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行上面的代码会引发panic，为什么呢？&lt;/p>
&lt;blockquote>
&lt;p>在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。
要分配内存，就需要new和make。Go 语言中new和make是内建的两个函数，主要用来分配内存。&lt;/p>
&lt;/blockquote>
&lt;h4 id="区别">区别&lt;/h4>
&lt;ol>
&lt;li>两者都是用来做内存分配的&lt;/li>
&lt;li>make只能用于slice、map以及channel的初始化，返回的还是这三个引用类型的本身&lt;/li>
&lt;li>new用于类型的内存分配，并且内存赌赢的值为类型的零值，返回的是指向类型的指针&lt;/li>
&lt;/ol>
&lt;h4 id="用法实例">用法实例&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 使用new关键字创建指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">new&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%T&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 输出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 使用map关键字创建指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;a&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 输出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading">&lt;/h3></description></item><item><title>Blog: 第二篇博客文章</title><link>https://deeparena.github.io/website/blog/news/second-post/</link><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid>https://deeparena.github.io/website/blog/news/second-post/</guid><description/></item></channel></rss>